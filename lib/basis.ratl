(define list1 ('a -> (list 'a)) (x) (cons x '()))
(define bind ('a 'b (list (pair 'a 'b)) -> (list (pair 'a 'b))) (x y alist)
  (if (null? alist)
    (list1 (pair x y))
    (if (= x (fst (car alist)))
      (cons (pair x y) (cdr alist))
      (cons (car alist) (bind x y (cdr alist))))))
(define isbound? ('a (list (pair 'a 'b)) -> bool) (x alist)
  (if (null? alist)
    #f
    (if (= x (fst (car alist)))
      #t
      (isbound? x (cdr alist)))))
(define find ('a (list (pair 'a 'b)) -> 'b) (x alist)
  (if (null? alist)
    (error 'not-found)
    (if (= x (fst (car alist)))
      (snd (car alist))
      (find x (cdr alist)))))
(define caar ((list (list 'a)) -> 'a) (xs) (car (car xs)))
(define cadr ((list 'a) -> 'a) (xs) (car (cdr xs)))
(define cdar ((list (list 'a)) -> (list 'a)) (xs) (cdr (car xs)))
(define length ((list 'a) -> int) (xs)
  (if (null? xs) 0
    (+ 1 (length (cdr xs)))))
(define and (bool bool -> bool) (b c) (if b c b))
(define or  (bool bool -> bool) (b c) (if b b c))
(define not (bool -> bool) (b) (if b #f #t))
(define append ((list 'a) (list 'a) -> (list 'a)) (xs ys)
  (if (null? xs)
     ys
     (cons (car xs) (append (cdr xs) ys))))
(define revapp ((list 'a) (list 'a) -> (list 'a)) (xs ys)
  (if (null? xs)
     ys
     (revapp (cdr xs) (cons (car xs) ys))))
(define reverse ((list 'a) -> (list 'a)) (xs) (revapp xs '()))
(define <=  (int int -> bool) (x y) (not (> x y)))
(define >=  (int int -> bool) (x y) (not (< x y)))
(define !=  ('a  'a  -> bool) (x y) (not (= x y)))
(define max (int int -> int) (x y) (if (> x y) x y))
(define min (int int -> int) (x y) (if (< x y) x y))
(define mod (int int -> int) (m n) (- m (* n (/ m n))))
(define gcd (int int -> int) (m n) (if (= n 0) m (gcd n (mod m n))))
(define lcm (int int -> int) (m n) (* m (/ n (gcd m n))))
(define list2 ('a 'a ->                   (list 'a)) (x y)             (cons x (list1 y)))
(define list3 ('a 'a 'a ->                (list 'a)) (x y z)           (cons x (list2 y z)))
(define list4 ('a 'a 'a 'a ->             (list 'a)) (x y z a)         (cons x (list3 y z a)))
(define list5 ('a 'a 'a 'a 'a ->          (list 'a)) (x y z a b)       (cons x (list4 y z a b)))
(define list6 ('a 'a 'a 'a 'a 'a ->       (list 'a)) (x y z a b c)     (cons x (list5 y z a b c)))
(define list7 ('a 'a 'a 'a 'a 'a 'a ->    (list 'a)) (x y z a b c d)   (cons x (list6 y z a b c d)))
(define list8 ('a 'a 'a 'a 'a 'a 'a 'a -> (list 'a)) (x y z a b c d e) (cons x (list7 y z a b c d e)))
