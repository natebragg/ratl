(define swapback ([list int] -> [list int]) (xs)
    (if (null? (cdr xs))
        xs
        (let ((x (car xs))
              (rest (swapback (cdr xs))))
             (if (< (car rest) x)
                 (cons (car rest) (cons x (cdr rest)))
                 (cons x rest)))))

(define bubble ([list int] -> [list int]) (xs)
    (if (null? xs)
        xs
        (let ((bubbled (swapback xs)))
             (cons (car bubbled) (bubble (cdr bubbled))))))

(define main ([list int] -> [list int]) (xs)
    (bubble xs))
