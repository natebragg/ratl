(define insert ([Nat] -> [Nat]) (xs)
    (let ((x (car xs))
          (zs (cdr xs)))
         (if (null? zs)
             xs
             (if (> x (car zs))
                 (cons (car zs) (insert (cons x (cdr (cdr xs)))))
                 xs))))

(define insertion ([Nat] -> [Nat]) (xs)
    (if (null? xs)
        xs
        (insert (cons (car xs) (insertion (cdr xs))))))

(define main ([Nat] -> [Nat]) (xs)
    (insertion xs))
