(define mono_inc ([Nat] -> Boolean) (xs)
    (if (not (null? xs))
        (if (not (null? (cdr xs)))
            (if (> (car xs) (car (cdr xs)))
                #f
                (mono_inc (cdr xs)))
            #t)
        #t))

(define mono_dec ([Nat] -> Boolean) (xs)
    (if (not (null? xs))
        (if (not (null? (cdr xs)))
            (if (< (car xs) (car (cdr xs)))
                #f
                (mono_dec (cdr xs)))
            #t)
        #t))

(define main ([Nat] -> Boolean) (xs)
    (if (mono_inc xs)
        #t
        (mono_dec xs)))
