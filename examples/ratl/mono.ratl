(define mono_inc ([Nat] -> Boolean) (xs)
    (if (not (null? xs))
        (let ((ys (cdr xs)))
             (if (not (null? ys))
                 (if (> (car xs) (car ys))
                     #f
                     (mono_inc ys))
                 #t))
        #t))

(define mono_dec ([Nat] -> Boolean) (xs)
    (if (not (null? xs))
        (let ((ys (cdr xs)))
             (if (not (null? ys))
                 (if (< (car xs) (car ys))
                     #f
                     (mono_dec ys))
                 #t))
        #t))

(define main ([Nat] -> Boolean) (xs)
    (if (mono_inc xs)
        #t
        (mono_dec xs)))
