(define split (int [list int] -> (pair [list int] [list int])) (n xs)
    (if (null? xs)
        (pair '[] '[])
        (let ((lsrs (split n (cdr xs))))
          (if (> (car xs) n)
              (pair (fst lsrs) (cons (car xs) (snd lsrs)))
              (pair (cons (car xs) (fst lsrs)) (snd lsrs))))))

(define quick ([list int] -> [list int]) (xs)
    (if (null? xs)
        xs
        (let ((lsrs (split (car xs) (cdr xs))))
          (append
              (quick (fst lsrs))
              (cons (car xs) (quick (snd lsrs)))))))

(define main([list int] -> [list int]) (xs)
    (quick xs))
