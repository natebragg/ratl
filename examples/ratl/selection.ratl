(define minimum ([list int] -> int) (xs)
    (let ((x (car xs)))
         (if (null? (cdr xs))
             x
             (let ((m (minimum (cdr xs))))
                  (if (< m x) m x)))))

(define delnextofcar ([list int] -> [list int]) (xs)
    (let ((n (car xs))
          (xs (cdr xs)))
         (if (= n (car xs))
             (cdr xs)
             (cons (car xs) (delnextofcar (cons n (cdr xs)))))))

(define selection ([list int] -> [list int]) (xs)
    (if (null? xs)
        xs
        (let ((m (minimum xs)))
             (cons m (selection (delnextofcar (cons m xs)))))))

(define main ([list int] -> [list int]) (xs)
    (selection xs))
